{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Head\\\\Desktop\\\\React JS\\\\dev-challenge-template-master\\\\kimchechallenge\\\\src\\\\index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloClient, InMemoryCache, gql, useQuery } from '@apollo/client';\nimport Flags from \"country-flag-icons/react/3x2\"; // initialize a GraphQL client\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: 'https://countries.trevorblades.com'\n}); // write a GraphQL query that asks for names and codes for all countries\n\nconst LIST_COUNTRIES = gql`\n  {\n    countries {\n      name\n      code\n      native\n      capital\n      emoji\n      currency\n      languages {\n        code\n        name\n      }\n    }\n  }\n`; // create a component that renders a select input for coutries\n\nfunction CountrySelect() {\n  const [country, setCountry] = useState('CL'); // const [monea, setMonea] = useState('');\n  // const [pais, setPais] = useState('');\n\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(LIST_COUNTRIES, {\n    client\n  });\n\n  if (loading || error) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 12\n      }\n    }, error ? error.message : 'Loading...');\n  } // const flagNationCode = ''\n  // const Bandera = (flagNationCode) => {\n  //   return <Flags.`${}` />;\n  // };\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, \"Versi\\xF3n fruna\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"select\" // name={country}\n    // onChange={setData}\n    ,\n    onChange: event => {\n      setCountry(event.target.value);\n    },\n    value: country,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, data.countries.map(country => /*#__PURE__*/React.createElement(\"option\", {\n    key: country.code,\n    value: country,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 33\n    }\n  }, country.name, \" \"))));\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(CountrySelect, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 17\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["C:/Users/Head/Desktop/React JS/dev-challenge-template-master/kimchechallenge/src/index.js"],"names":["React","useState","ReactDOM","ApolloClient","InMemoryCache","gql","useQuery","Flags","client","cache","uri","LIST_COUNTRIES","CountrySelect","country","setCountry","data","loading","error","message","event","target","value","countries","map","code","name","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAAQC,YAAR,EAAsBC,aAAtB,EAAqCC,GAArC,EAA0CC,QAA1C,QAAyD,gBAAzD;AACA,OAAOC,KAAP,MAAkB,8BAAlB,C,CAEA;;AACA,MAAMC,MAAM,GAAG,IAAIL,YAAJ,CAAiB;AAC9BM,EAAAA,KAAK,EAAE,IAAIL,aAAJ,EADuB;AAE9BM,EAAAA,GAAG,EAAE;AAFyB,CAAjB,CAAf,C,CAOA;;AACA,MAAMC,cAAc,GAAGN,GAAI;;;;;;;;;;;;;;;CAA3B,C,CAiBA;;AACA,SAASO,aAAT,GAAyB;AACvB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,IAAD,CAAtC,CADuB,CAEvB;AACA;;AACA,QAAM;AAACc,IAAAA,IAAD;AAAOC,IAAAA,OAAP;AAAgBC,IAAAA;AAAhB,MAAyBX,QAAQ,CAACK,cAAD,EAAiB;AAACH,IAAAA;AAAD,GAAjB,CAAvC;;AAEA,MAAIQ,OAAO,IAAIC,KAAf,EAAsB;AACpB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIA,KAAK,GAAGA,KAAK,CAACC,OAAT,GAAmB,YAA5B,CAAP;AACD,GARsB,CASvB;AACA;AACA;AACA;;;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAKI;AACwB,IAAA,IAAI,EAAC,QAD7B,CAEwB;AACA;AAHxB;AAIwB,IAAA,QAAQ,EAAGC,KAAD,IAAW;AACnBL,MAAAA,UAAU,CAACK,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAV;AACH,KANvB;AAOwB,IAAA,KAAK,EAAER,OAP/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQ2BE,IAAI,CAACO,SAAL,CAAeC,GAAf,CAAmBV,OAAO,iBAC7B;AAAQ,IAAA,GAAG,EAAEA,OAAO,CAACW,IAArB;AAA2B,IAAA,KAAK,EAAEX,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4CA,OAAO,CAACY,IAApD,MADG,CAR3B,CALJ,CADF;AAqBD;;AAEDvB,QAAQ,CAACwB,MAAT,eAAgB,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAmCC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAnC","sourcesContent":["import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport {ApolloClient, InMemoryCache, gql, useQuery} from '@apollo/client';\nimport Flags from \"country-flag-icons/react/3x2\";\n\n// initialize a GraphQL client\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: 'https://countries.trevorblades.com'\n});\n\n\n\n// write a GraphQL query that asks for names and codes for all countries\nconst LIST_COUNTRIES = gql`\n  {\n    countries {\n      name\n      code\n      native\n      capital\n      emoji\n      currency\n      languages {\n        code\n        name\n      }\n    }\n  }\n`;\n\n// create a component that renders a select input for coutries\nfunction CountrySelect() {\n  const [country, setCountry] = useState('CL');\n  // const [monea, setMonea] = useState('');\n  // const [pais, setPais] = useState('');\n  const {data, loading, error} = useQuery(LIST_COUNTRIES, {client});\n\n  if (loading || error) {\n    return <p>{error ? error.message : 'Loading...'}</p>;\n  }\n  // const flagNationCode = ''\n  // const Bandera = (flagNationCode) => {\n  //   return <Flags.`${}` />;\n  // };\n\n  return (\n    <div>\n      <h3>Versi√≥n fruna \n\n        </h3>\n\n        <input\n                                type=\"select\"\n                                // name={country}\n                                // onChange={setData}\n                                onChange={(event) => {\n                                  setCountry(event.target.value);\n                              }}\n                                value={country}>\n                                  {data.countries.map(country => (\n                                <option key={country.code} value={country}>{country.name} </option>\n                                  ))}\n                            </input>\n\n    </div>\n  )\n}\n\nReactDOM.render(<CountrySelect />, document.getElementById('root'));"]},"metadata":{},"sourceType":"module"}
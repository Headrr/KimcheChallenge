{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Head\\\\Desktop\\\\React JS\\\\dev-challenge-template-master\\\\kimchechallenge\\\\src\\\\index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloClient, InMemoryCache, gql, useQuery } from '@apollo/client';\nimport Flags from \"country-flag-icons/react/3x2\"; // initialize a GraphQL client\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: 'https://countries.trevorblades.com'\n}); // write a GraphQL query that asks for names and codes for all countries\n\nconst LIST_COUNTRIES = gql`\n  {\n    countries {\n      name\n      code\n      native\n      capital\n      emoji\n      currency\n      languages {\n        code\n        name\n      }\n    }\n  }\n`;\nconst [local, setLocal] = useState(\"\");\n\nconst item = () => {\n  setLocal(window.localStorage.getItem(\"PAIS\"));\n}; // create a component that renders a select input for coutries\n\n\nconst CountrySelect = () => {\n  const [country, setCountry] = useState('CL');\n  const [monea, setMonea] = useState(''); // const [pais, setPais] = useState('');\n\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(LIST_COUNTRIES, {\n    client\n  });\n\n  if (loading || error) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 12\n      }\n    }, error ? error.message : 'Loading...');\n  } // const flagNationCode = ''\n  // const Bandera = (flagNationCode) => {\n  //   return <Flags.`${}` />;\n  // };\n\n\n  const setValue = value => {\n    try {\n      // setStoredValue(value);\n      window.localStorage.setItem(\"PAIS\", JSON.stringify(value));\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const defMonea = item => {\n    item = 'CL';\n    return `${item}`;\n  };\n\n  const pais = countrys => {\n    return (// <img src={`http://purecatamphetamine.github.io/country-flag-icons/3x2/${countrys}}CL.svg`} alt=\"GG\"/>\n      `http://purecatamphetamine.github.io/country-flag-icons/3x2/${countrys}}CL.svg`\n    );\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, \"Versi\\xF3n fruna\"), /*#__PURE__*/React.createElement(\"select\", {\n    value: country,\n    onChange: event => {\n      setCountry(event.target.value);\n      setValue(event.target.value);\n      console.log(country);\n    },\n    onClick: () => defMonea(monea),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, data && data.countries.map(country => /*#__PURE__*/React.createElement(\"option\", {\n    key: country.code,\n    value: country.code,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, country.name, \" ||\", \"Currency: \", country.currency))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, data.countries.filter(country => country.code === {\n    defMonea\n  }).map(countre => /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, \"Currency: \", countre.currency))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, country), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  }, \"el kodigo de tu pa\\xED e: \", country, \" \\uD83D\\uDE38\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  }, \"tu monea e: \", monea), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  }, \"LOCAL: \", local));\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(CountrySelect, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 17\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["C:/Users/Head/Desktop/React JS/dev-challenge-template-master/kimchechallenge/src/index.js"],"names":["React","useState","ReactDOM","ApolloClient","InMemoryCache","gql","useQuery","Flags","client","cache","uri","LIST_COUNTRIES","local","setLocal","item","window","localStorage","getItem","CountrySelect","country","setCountry","monea","setMonea","data","loading","error","message","setValue","value","setItem","JSON","stringify","err","console","log","defMonea","pais","countrys","event","target","countries","map","code","name","currency","filter","countre","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport {ApolloClient, InMemoryCache, gql, useQuery} from '@apollo/client';\nimport Flags from \"country-flag-icons/react/3x2\";\n\n// initialize a GraphQL client\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: 'https://countries.trevorblades.com'\n});\n\n// write a GraphQL query that asks for names and codes for all countries\nconst LIST_COUNTRIES = gql`\n  {\n    countries {\n      name\n      code\n      native\n      capital\n      emoji\n      currency\n      languages {\n        code\n        name\n      }\n    }\n  }\n`;\nconst [local, setLocal] = useState(\"\");\n\nconst item = () => {\n  setLocal(window.localStorage.getItem(\"PAIS\"))\n};\n\n// create a component that renders a select input for coutries\nconst CountrySelect = () => {\n  const [country, setCountry] = useState('CL');\n  const [monea, setMonea] = useState('');\n  // const [pais, setPais] = useState('');\n  const {data, loading, error} = useQuery(LIST_COUNTRIES, {client});\n\n  if (loading || error) {\n    return <p>{error ? error.message : 'Loading...'}</p>;\n  }\n  // const flagNationCode = ''\n  // const Bandera = (flagNationCode) => {\n  //   return <Flags.`${}` />;\n  // };\n  const setValue = (value) => {\n    try {\n      // setStoredValue(value);\n      window.localStorage.setItem(\"PAIS\", JSON.stringify(value));\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const defMonea = (item) => {\n    item = 'CL';\n    return `${item}`;\n  }\nconst pais = (countrys) => {\n  return (\n    // <img src={`http://purecatamphetamine.github.io/country-flag-icons/3x2/${countrys}}CL.svg`} alt=\"GG\"/>\n    `http://purecatamphetamine.github.io/country-flag-icons/3x2/${countrys}}CL.svg`\n  )\n  };\n  return (\n    <div>\n      <h3>Versión fruna \n        {/* <img>&#128556;</img>  */}\n        </h3>\n    <select value={country} onChange={(event) => \n    {setCountry(event.target.value)\n    setValue(event.target.value)\n    console.log(country)\n    }\n    \n  }\n  onClick={() => defMonea(monea)}\n  >\n      {data && data.countries.map(country => (\n        <option key={country.code} value={country.code}>\n          {country.name} ||\n          {/* <span>{\" \"}</span> */}\n          Currency: {country.currency}\n        </option>\n      ))}\n    </select>\n\n    <div>\n    {data.countries.filter(country => country.code==={defMonea}).map(countre => (\n        <h1>\n                    {/* <span>{\" \"}</span> */}\n          Currency: {countre.currency}\n        </h1>\n      ))}\n    </div>\n    <div className=\"label\">{country}</div>\n          <div className=\"value\">\n            {/* {Bandera(country)} */}\n            {/* <img\n              // alt=\"United States\"\n              // src={pais}\n              source={pais(country)}\n              alt=\"gg\"\n              /> */}\n              {/* {pais(country)} */}\n          </div>\n    <h1>el kodigo de tu paí e: {country} 😸</h1>\n    <h2>tu monea e: {monea}</h2>\n    <h4>LOCAL: {local}</h4>\n    \n\n    </div>\n  )\n}\n\nReactDOM.render(<CountrySelect />, document.getElementById('root'));"]},"metadata":{},"sourceType":"module"}
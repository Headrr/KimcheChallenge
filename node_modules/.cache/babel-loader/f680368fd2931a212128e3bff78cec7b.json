{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Head\\\\Desktop\\\\React JS\\\\dev-challenge-template-master\\\\kimchechallenge\\\\src\\\\screens\\\\Countries\\\\paises.js\";\nimport React, { useEffect, useStatem, useContext, useState } from 'react'; // import { View, Text, Image, ScrollView, TouchableOpacity, ActivityIndicator} from 'react-native'\n// import axios from 'axios';\n//import {gql, useQuery} from '@apollo/client';\n// import { SafeAreaView } from 'react-native-safe-area-context';\n// import {CHARACTERSBYIDS} from './graphql/queries'\n// import { CartContext } from '../../Context';\n// import { useNavigation } from '@react-navigation/core';\n// import { useNavigation } from '@react-navigation/native';\n// import CHARACTER_QUERY from '../Cart/graphql/queries';\n// import { gql, useQuery} from '@apollo/client';\n// import { ApolloProvider } from \"@apollo/react-hooks\";\n\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloClient, InMemoryCache, gql, useQuery } from '@apollo/client';\n\nconst home = () => {\n  const httpLink = new HttpLink({\n    credentials: 'same-origin',\n    uri: 'https://48p1r2roz4.sse.codesandbox.io/'\n  });\n  const client = new ApolloClient({\n    cache: new InMemoryCache(),\n    //   uri: 'https://countries.trevorblades.com/',\n    link: httpLink\n  }); // const CHARACTERSBYIDS = gql`\n  //     query characters($ids: [ID!]!) {\n  //     charactersByIds(ids: $ids) {\n  //         name\n  //         id\n  //         status\n  //         gender\n  //         species\n  //         image\n  //     }\n  //     }\n  // // `;\n\n  const LIST_COUNTRIES = gql`\n  {\n    countries {\n      name\n      code\n    }\n  }\n`; // create a component that renders a select input for coutries\n\n  const CountrySelect = () => {\n    const [country, setCountry] = useState('CL');\n    const {\n      data,\n      loading,\n      error\n    } = useQuery(LIST_COUNTRIES, {\n      client\n    });\n\n    if (loading || error) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 18\n        }\n      }, error ? error.message : 'Loading...');\n    }\n\n    return /*#__PURE__*/React.createElement(\"select\", {\n      value: country,\n      onChange: event => setCountry(event.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    }, data.countries.map(country => /*#__PURE__*/React.createElement(\"option\", {\n      key: country.code,\n      value: country.code,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 15\n      }\n    }, country.name)));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, \"PAISES GG\"), CountrySelect()); // const CHARACTER_QUERY = gql`\n  //     query CHARACTER_QUERY {\n  //         character(id: 1) {\n  //         name\n  //         id\n  //         }\n  //     }`   \n};\n\nexport default home;","map":{"version":3,"sources":["C:/Users/Head/Desktop/React JS/dev-challenge-template-master/kimchechallenge/src/screens/Countries/paises.js"],"names":["React","useEffect","useStatem","useContext","useState","HttpLink","ApolloClient","InMemoryCache","gql","useQuery","home","httpLink","credentials","uri","client","cache","link","LIST_COUNTRIES","CountrySelect","country","setCountry","data","loading","error","message","event","target","value","countries","map","code","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,UAAtC,EAAkDC,QAAlD,QAAkE,OAAlE,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAAQC,YAAR,EAAsBC,aAAtB,EAAqCC,GAArC,EAA0CC,QAA1C,QAAyD,gBAAzD;;AACA,MAAMC,IAAI,GAAG,MAAM;AAEf,QAAMC,QAAQ,GAAG,IAAIN,QAAJ,CAAa;AAC1BO,IAAAA,WAAW,EAAE,aADa;AAE1BC,IAAAA,GAAG,EAAE;AAFqB,GAAb,CAAjB;AAKJ,QAAMC,MAAM,GAAG,IAAIR,YAAJ,CAAiB;AAC9BS,IAAAA,KAAK,EAAE,IAAIR,aAAJ,EADuB;AAEhC;AAEES,IAAAA,IAAI,EAAEL;AAJwB,GAAjB,CAAf,CAPmB,CAaf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMM,cAAc,GAAGT,GAAI;;;;;;;CAA3B,CA1Be,CAmCnB;;AAEA,QAAMU,aAAa,GAAG,MAAM;AACpB,UAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,IAAD,CAAtC;AACA,UAAM;AAACiB,MAAAA,IAAD;AAAOC,MAAAA,OAAP;AAAgBC,MAAAA;AAAhB,QAAyBd,QAAQ,CAACQ,cAAD,EAAiB;AAACH,MAAAA;AAAD,KAAjB,CAAvC;;AAEA,QAAIQ,OAAO,IAAIC,KAAf,EAAsB;AACpB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIA,KAAK,GAAGA,KAAK,CAACC,OAAT,GAAmB,YAA5B,CAAP;AACD;;AAED,wBACE;AAAQ,MAAA,KAAK,EAAEL,OAAf;AAAwB,MAAA,QAAQ,EAAEM,KAAK,IAAIL,UAAU,CAACK,KAAK,CAACC,MAAN,CAAaC,KAAd,CAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGN,IAAI,CAACO,SAAL,CAAeC,GAAf,CAAmBV,OAAO,iBACzB;AAAQ,MAAA,GAAG,EAAEA,OAAO,CAACW,IAArB;AAA2B,MAAA,KAAK,EAAEX,OAAO,CAACW,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGX,OAAO,CAACY,IADX,CADD,CADH,CADF;AAUD,GAlBP;;AAoBE,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,EAIKb,aAAa,EAJlB,CADJ,CAzDiB,CAkEf;AACA;AACA;AACA;AACA;AACA;AACA;AAEH,CA1ED;;AA2EA,eAAeR,IAAf","sourcesContent":["import React, { useEffect, useStatem, useContext, useState } from 'react'\r\n// import { View, Text, Image, ScrollView, TouchableOpacity, ActivityIndicator} from 'react-native'\r\n// import axios from 'axios';\r\n//import {gql, useQuery} from '@apollo/client';\r\n// import { SafeAreaView } from 'react-native-safe-area-context';\r\n// import {CHARACTERSBYIDS} from './graphql/queries'\r\n// import { CartContext } from '../../Context';\r\n// import { useNavigation } from '@react-navigation/core';\r\n// import { useNavigation } from '@react-navigation/native';\r\n// import CHARACTER_QUERY from '../Cart/graphql/queries';\r\n// import { gql, useQuery} from '@apollo/client';\r\n// import { ApolloProvider } from \"@apollo/react-hooks\";\r\nimport { HttpLink } from 'apollo-link-http'\r\nimport {ApolloClient, InMemoryCache, gql, useQuery} from '@apollo/client';\r\nconst home = () => {\r\n\r\n    const httpLink = new HttpLink({\r\n        credentials: 'same-origin',\r\n        uri: 'https://48p1r2roz4.sse.codesandbox.io/',\r\n      })\r\n\r\nconst client = new ApolloClient({\r\n  cache: new InMemoryCache(),\r\n//   uri: 'https://countries.trevorblades.com/',\r\n\r\n  link: httpLink\r\n});\r\n    // const CHARACTERSBYIDS = gql`\r\n    //     query characters($ids: [ID!]!) {\r\n    //     charactersByIds(ids: $ids) {\r\n    //         name\r\n    //         id\r\n    //         status\r\n    //         gender\r\n    //         species\r\n    //         image\r\n    //     }\r\n    //     }\r\n    // // `;\r\n\r\n    const LIST_COUNTRIES = gql`\r\n  {\r\n    countries {\r\n      name\r\n      code\r\n    }\r\n  }\r\n`;\r\n\r\n// create a component that renders a select input for coutries\r\n\r\nconst CountrySelect = () => {\r\n        const [country, setCountry] = useState('CL');\r\n        const {data, loading, error} = useQuery(LIST_COUNTRIES, {client});\r\n      \r\n        if (loading || error) {\r\n          return <p>{error ? error.message : 'Loading...'}</p>;\r\n        }\r\n      \r\n        return (\r\n          <select value={country} onChange={event => setCountry(event.target.value)}>\r\n            {data.countries.map(country => (\r\n              <option key={country.code} value={country.code}>\r\n                {country.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        );\r\n        \r\n      }  \r\n\r\n  return (\r\n      <div>\r\n          <h1>\r\n              PAISES GG\r\n          </h1>\r\n          {CountrySelect()}\r\n      </div>\r\n  )\r\n        \r\n    // const CHARACTER_QUERY = gql`\r\n    //     query CHARACTER_QUERY {\r\n    //         character(id: 1) {\r\n    //         name\r\n    //         id\r\n    //         }\r\n    //     }`   \r\n\r\n}\r\nexport default home;\r\n"]},"metadata":{},"sourceType":"module"}
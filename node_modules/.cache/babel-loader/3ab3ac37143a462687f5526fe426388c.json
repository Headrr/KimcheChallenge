{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Head\\\\Desktop\\\\React JS\\\\dev-challenge-template-master\\\\kimchechallenge\\\\src\\\\index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloClient, InMemoryCache, gql, useQuery } from \"@apollo/client\";\nimport Flags from \"country-flag-icons/react/3x2\";\nimport Header from \"./components/header\";\nimport Footer from \"./components/footer\";\nimport { Label, Row, Col, Input } from \"reactstrap\";\nimport SearchIcon from \"@material-ui/icons/Search\"; // initialize a GraphQL client\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: \"https://countries.trevorblades.com\"\n}); // write a GraphQL query that asks for names and codes for all countries\n// const LIST_COUNTRIES = gql`\n//   {\n//     countries {\n//       name\n//       code\n//       native\n//       capital\n//       emoji\n//       currency\n//       languages {\n//         code\n//         name\n//       }\n//     }\n//   }\n// `;\n// interface Country {\n//   name: string;\n//   code: string;\n//   capital: string;\n//   continent: {\n//     name: string;\n//   };\n// }\n// interface CountryData {\n//   countries: Country[];\n// }\n// const [CountryVariable] = useState({\n//   code: \"\"\n// })\n// const COUNTRIES_QUERY = gql`\n//   query Counties($code: String) {\n//     countries(filter: { continent: { eq: $code } }) {\n//       name\n//       code\n//       capital\n//       continent {\n//         name\n//       }\n//     }\n//   }\n// `;\n// const COUNTRIES_QUERY = gql`\n//   query Countries {\n//     countries {\n//       name\n//       code\n//       capital\n//       continent {\n//         name\n//         code\n//       }\n//     }\n//   }\n// `;\n\nconst CountryList = () => {\n  // const [conti, setConti] = useState(\"EU\");\n  const [continentCode, setContinentCode] = useState('');\n  const [cont, setCont] = useState(\"\");\n  const COUNTRIES_QUERY = gql`\n  query Counties($code: String) {\n    countries(filter: { continent: { eq: $code } }) {\n      name\n      code\n      capital\n      continent {\n        name\n        code\n      }\n    }\n  }\n`;\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(COUNTRIES_QUERY, {\n    client,\n    variables: {\n      code: continentCode\n    }\n  });\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n\n  const {\n    countries\n  } = data;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      margin: 20,\n      marginTop: 100\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 1\n    }\n  }, \" \"), /*#__PURE__*/React.createElement(\"select\", {\n    value: cont,\n    onChange: event => {\n      setCont(event.target.value);\n      console.log(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"AS\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, \"Asia\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"EU\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, \"EUROPA\")), countries.length === 0 ? /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 32\n    }\n  }, \"GG\") : countries.map((c, i) => /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, c.name, \" - \", c.capital, \" - \", c.continent.name)), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }));\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(CountryList, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 17\n  }\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["C:/Users/Head/Desktop/React JS/dev-challenge-template-master/kimchechallenge/src/index.js"],"names":["React","useEffect","useState","ReactDOM","ApolloClient","InMemoryCache","gql","useQuery","Flags","Header","Footer","Label","Row","Col","Input","SearchIcon","client","cache","uri","CountryList","continentCode","setContinentCode","cont","setCont","COUNTRIES_QUERY","data","loading","error","variables","code","countries","margin","marginTop","event","target","value","console","log","length","map","c","i","name","capital","continent","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloClient, InMemoryCache, gql, useQuery } from \"@apollo/client\";\nimport Flags from \"country-flag-icons/react/3x2\";\nimport Header from \"./components/header\";\nimport Footer from \"./components/footer\";\nimport { Label, Row, Col, Input } from \"reactstrap\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n// initialize a GraphQL client\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: \"https://countries.trevorblades.com\",\n});\n\n// write a GraphQL query that asks for names and codes for all countries\n// const LIST_COUNTRIES = gql`\n//   {\n//     countries {\n//       name\n//       code\n//       native\n//       capital\n//       emoji\n//       currency\n//       languages {\n//         code\n//         name\n//       }\n//     }\n//   }\n// `;\n\n// interface Country {\n//   name: string;\n//   code: string;\n//   capital: string;\n//   continent: {\n//     name: string;\n//   };\n// }\n\n// interface CountryData {\n//   countries: Country[];\n// }\n\n// const [CountryVariable] = useState({\n//   code: \"\"\n// })\n\n// const COUNTRIES_QUERY = gql`\n//   query Counties($code: String) {\n//     countries(filter: { continent: { eq: $code } }) {\n//       name\n//       code\n//       capital\n//       continent {\n//         name\n//       }\n//     }\n//   }\n// `;\n\n// const COUNTRIES_QUERY = gql`\n//   query Countries {\n//     countries {\n//       name\n//       code\n//       capital\n//       continent {\n//         name\n//         code\n//       }\n//     }\n//   }\n// `;\n\n\nconst CountryList = () => {\n  \n  // const [conti, setConti] = useState(\"EU\");\n  const [continentCode, setContinentCode] = useState('');\n  const [cont, setCont] = useState(\"\");\n\n  const COUNTRIES_QUERY = gql`\n  query Counties($code: String) {\n    countries(filter: { continent: { eq: $code } }) {\n      name\n      code\n      capital\n      continent {\n        name\n        code\n      }\n    }\n  }\n`;\n\n  const { data, loading, error } = useQuery(COUNTRIES_QUERY, { client,\n    variables: {\n      code: continentCode,\n    }, });\n\n \n  \n  if (loading) {\n    return <p>Loading...</p>;\n  }  \n  const { countries } = data;\n  return (\n    <>\n<Header></Header>\n<span style={{margin: 20, marginTop: 100}}>{\" \"}</span>\n<select\n        value={cont}\n        onChange={(event) => {\n          setCont(event.target.value)\n          console.log(event.target.value);\n        }}\n      >\n      \n            <option value='AS'>\nAsia\n            </option>\n            <option value='EU'>\nEUROPA\n            </option>\n    \n      </select>\n\n      {countries.length=== 0 ? <h1>GG</h1> :\n      countries.map((c, i) => (\n        <div key={i}>\n          {c.name} - {c.capital} - {c.continent.name}\n        </div>\n      ))}\n\n      <Footer></Footer>\n    </>\n  );\n};\n\n\nReactDOM.render(<CountryList />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Head\\\\Desktop\\\\React JS\\\\dev-challenge-template-master\\\\kimchechallenge\\\\src\\\\index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloClient, InMemoryCache, gql, useQuery } from \"@apollo/client\";\nimport Flags from \"country-flag-icons/react/3x2\";\nimport Header from \"./components/header\";\nimport Footer from \"./components/footer\";\nimport { Label, Row, Col, Input } from \"reactstrap\";\nimport SearchIcon from \"@material-ui/icons/Search\"; // initialize a GraphQL client\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: \"https://countries.trevorblades.com\"\n}); // write a GraphQL query that asks for names and codes for all countries\n\nconst LIST_COUNTRIES = gql`\n  {\n    countries {\n      name\n      code\n      native\n      capital\n      emoji\n      currency\n      languages {\n        code\n        name\n      }\n    }\n  }\n`; // interface Country {\n//   name: string;\n//   code: string;\n//   capital: string;\n//   continent: {\n//     name: string;\n//   };\n// }\n// interface CountryData {\n//   countries: Country[];\n// }\n// interface CountryVariable {\n//   code: string;\n// }\n\nconst COUNTRIES_QUERY = gql`\n  query Counties($code: String) {\n    countries(filter: { continent: { eq: $code } }) {\n      name\n      code\n      capital\n      continent {\n        name\n      }\n    }\n  }\n`;\n\nconst CountryList = () => {\n  const continentCode = 'EU'; // const { data, loading } = useQuery<CountryData, CountryVariable>(COUNTRIES_QUERY, {\n  //   variables: {\n  //     code: continentCode,\n  //   },\n  // });\n  // if (loading) return <p>Loading...</p>;\n  // const { countries } = data;\n  // create a component that renders a select input for coutries\n  // const CountrySelect = () => {\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 1\n    }\n  }));\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(CountryList, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 17\n  }\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["C:/Users/Head/Desktop/React JS/dev-challenge-template-master/kimchechallenge/src/index.js"],"names":["React","useEffect","useState","ReactDOM","ApolloClient","InMemoryCache","gql","useQuery","Flags","Header","Footer","Label","Row","Col","Input","SearchIcon","client","cache","uri","LIST_COUNTRIES","COUNTRIES_QUERY","CountryList","continentCode","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,GAAtC,EAA2CC,QAA3C,QAA2D,gBAA3D;AACA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,GAArB,EAA0BC,KAA1B,QAAuC,YAAvC;AACA,OAAOC,UAAP,MAAuB,2BAAvB,C,CACA;;AACA,MAAMC,MAAM,GAAG,IAAIZ,YAAJ,CAAiB;AAC9Ba,EAAAA,KAAK,EAAE,IAAIZ,aAAJ,EADuB;AAE9Ba,EAAAA,GAAG,EAAE;AAFyB,CAAjB,CAAf,C,CAKA;;AACA,MAAMC,cAAc,GAAGb,GAAI;;;;;;;;;;;;;;;CAA3B,C,CAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA,MAAMc,eAAe,GAAGd,GAAI;;;;;;;;;;;CAA5B;;AAaA,MAAMe,WAAW,GAAG,MAAM;AACxB,QAAMC,aAAa,GAAG,IAAtB,CADwB,CAExB;AACA;AACA;AACA;AACA;AAEA;AACA;AAEF;AACA;;AAEE,sBACE,uDACA,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,eAQJ,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARI,CADF;AAaD,CA3BD;;AA8BAnB,QAAQ,CAACoB,MAAT,eAAgB,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAiCC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAjC","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloClient, InMemoryCache, gql, useQuery } from \"@apollo/client\";\nimport Flags from \"country-flag-icons/react/3x2\";\nimport Header from \"./components/header\";\nimport Footer from \"./components/footer\";\nimport { Label, Row, Col, Input } from \"reactstrap\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n// initialize a GraphQL client\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: \"https://countries.trevorblades.com\",\n});\n\n// write a GraphQL query that asks for names and codes for all countries\nconst LIST_COUNTRIES = gql`\n  {\n    countries {\n      name\n      code\n      native\n      capital\n      emoji\n      currency\n      languages {\n        code\n        name\n      }\n    }\n  }\n`;\n\n// interface Country {\n//   name: string;\n//   code: string;\n//   capital: string;\n//   continent: {\n//     name: string;\n//   };\n// }\n\n// interface CountryData {\n//   countries: Country[];\n// }\n\n// interface CountryVariable {\n//   code: string;\n// }\n\nconst COUNTRIES_QUERY = gql`\n  query Counties($code: String) {\n    countries(filter: { continent: { eq: $code } }) {\n      name\n      code\n      capital\n      continent {\n        name\n      }\n    }\n  }\n`;\n\nconst CountryList = () => {\n  const continentCode = 'EU';\n  // const { data, loading } = useQuery<CountryData, CountryVariable>(COUNTRIES_QUERY, {\n  //   variables: {\n  //     code: continentCode,\n  //   },\n  // });\n\n  // if (loading) return <p>Loading...</p>;\n  // const { countries } = data;\n\n// create a component that renders a select input for coutries\n// const CountrySelect = () => {\n\n  return (\n    <>\n    <Header></Header>\n      {/* {countries.map((c, i) => (\n        <div key={i}>\n          {c.name} - {c.capital} - {c.continent.name}\n        </div>\n      ))} */}\n\n<Footer></Footer>\n    </>\n    \n  );\n};\n\n\nReactDOM.render(<CountryList />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}
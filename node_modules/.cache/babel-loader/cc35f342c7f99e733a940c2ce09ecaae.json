{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Head\\\\Desktop\\\\React JS\\\\dev-challenge-template-master\\\\kimchechallenge\\\\src\\\\screens\\\\Countries\\\\index.js\";\nimport React, { useEffect, useStatem, useContext, useState } from 'react'; // import { View, Text, Image, ScrollView, TouchableOpacity, ActivityIndicator} from 'react-native'\n// import axios from 'axios';\n//import {gql, useQuery} from '@apollo/client';\n// import { SafeAreaView } from 'react-native-safe-area-context';\n// import {CHARACTERSBYIDS} from './graphql/queries'\n// import { CartContext } from '../../Context';\n// import { useNavigation } from '@react-navigation/core';\n// import { useNavigation } from '@react-navigation/native';\n// import CHARACTER_QUERY from '../Cart/graphql/queries';\n// import { gql, useQuery} from '@apollo/client';\n\nimport ApolloClient from \"apollo-boost\"; // import { ApolloProvider } from \"@apollo/react-hooks\";\n\nconst index = () => {\n  const client = new ApolloClient({\n    //   cache: new InMemoryCache(),\n    uri: 'https://countries.trevorblades.com'\n  }); // const CHARACTERSBYIDS = gql`\n  //     query characters($ids: [ID!]!) {\n  //     charactersByIds(ids: $ids) {\n  //         name\n  //         id\n  //         status\n  //         gender\n  //         species\n  //         image\n  //     }\n  //     }\n  // // `;\n\n  const LIST_COUNTRIES = gql`\n  {\n    countries {\n      name\n      code\n    }\n  }\n`; // create a component that renders a select input for coutries\n\n  function CountrySelect() {\n    const [country, setCountry] = useState('US');\n    const {\n      data,\n      loading,\n      error\n    } = useQuery(LIST_COUNTRIES, {\n      client\n    });\n\n    if (loading || error) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 14\n        }\n      }, error ? error.message : 'Loading...');\n    }\n\n    return /*#__PURE__*/React.createElement(\"select\", {\n      value: country,\n      onChange: event => setCountry(event.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }\n    }, data.countries.map(country => /*#__PURE__*/React.createElement(\"option\", {\n      key: country.code,\n      value: country.code,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }, country.name)));\n  }\n\n  {\n    CountrySelect();\n  } // const CHARACTER_QUERY = gql`\n  //     query CHARACTER_QUERY {\n  //         character(id: 1) {\n  //         name\n  //         id\n  //         }\n  //     }`   \n};\n\nexport default index;","map":{"version":3,"sources":["C:/Users/Head/Desktop/React JS/dev-challenge-template-master/kimchechallenge/src/screens/Countries/index.js"],"names":["React","useEffect","useStatem","useContext","useState","ApolloClient","index","client","uri","LIST_COUNTRIES","gql","CountrySelect","country","setCountry","data","loading","error","useQuery","message","event","target","value","countries","map","code","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,UAAtC,EAAkDC,QAAlD,QAAkE,OAAlE,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAOC,YAAP,MAAyB,cAAzB,C,CACA;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAGpB,QAAMC,MAAM,GAAG,IAAIF,YAAJ,CAAiB;AAChC;AACEG,IAAAA,GAAG,EAAE;AAFyB,GAAjB,CAAf,CAHoB,CAOhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMC,cAAc,GAAGC,GAAI;;;;;;;CAA3B,CApBgB,CA6BpB;;AACA,WAASC,aAAT,GAAyB;AACrB,UAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC;AACA,UAAM;AAACU,MAAAA,IAAD;AAAOC,MAAAA,OAAP;AAAgBC,MAAAA;AAAhB,QAAyBC,QAAQ,CAACR,cAAD,EAAiB;AAACF,MAAAA;AAAD,KAAjB,CAAvC;;AAEA,QAAIQ,OAAO,IAAIC,KAAf,EAAsB;AACpB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIA,KAAK,GAAGA,KAAK,CAACE,OAAT,GAAmB,YAA5B,CAAP;AACD;;AAED,wBACE;AAAQ,MAAA,KAAK,EAAEN,OAAf;AAAwB,MAAA,QAAQ,EAAEO,KAAK,IAAIN,UAAU,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGP,IAAI,CAACQ,SAAL,CAAeC,GAAf,CAAmBX,OAAO,iBACzB;AAAQ,MAAA,GAAG,EAAEA,OAAO,CAACY,IAArB;AAA2B,MAAA,KAAK,EAAEZ,OAAO,CAACY,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGZ,OAAO,CAACa,IADX,CADD,CADH,CADF;AASD;;AAED;AAACd,IAAAA,aAAa;AAAG,GAjDC,CAmDhB;AACA;AACA;AACA;AACA;AACA;AACA;AAEH,CA3DD;;AA4DA,eAAeL,KAAf","sourcesContent":["import React, { useEffect, useStatem, useContext, useState } from 'react'\n// import { View, Text, Image, ScrollView, TouchableOpacity, ActivityIndicator} from 'react-native'\n// import axios from 'axios';\n//import {gql, useQuery} from '@apollo/client';\n// import { SafeAreaView } from 'react-native-safe-area-context';\n// import {CHARACTERSBYIDS} from './graphql/queries'\n// import { CartContext } from '../../Context';\n// import { useNavigation } from '@react-navigation/core';\n// import { useNavigation } from '@react-navigation/native';\n// import CHARACTER_QUERY from '../Cart/graphql/queries';\n// import { gql, useQuery} from '@apollo/client';\nimport ApolloClient from \"apollo-boost\";\n// import { ApolloProvider } from \"@apollo/react-hooks\";\n\nconst index = () => {\n\n\nconst client = new ApolloClient({\n//   cache: new InMemoryCache(),\n  uri: 'https://countries.trevorblades.com'\n});\n    // const CHARACTERSBYIDS = gql`\n    //     query characters($ids: [ID!]!) {\n    //     charactersByIds(ids: $ids) {\n    //         name\n    //         id\n    //         status\n    //         gender\n    //         species\n    //         image\n    //     }\n    //     }\n    // // `;\n\n    const LIST_COUNTRIES = gql`\n  {\n    countries {\n      name\n      code\n    }\n  }\n`;\n\n// create a component that renders a select input for coutries\nfunction CountrySelect() {\n    const [country, setCountry] = useState('US');\n    const {data, loading, error} = useQuery(LIST_COUNTRIES, {client});\n  \n    if (loading || error) {\n      return <p>{error ? error.message : 'Loading...'}</p>;\n    }\n  \n    return (\n      <select value={country} onChange={event => setCountry(event.target.value)}>\n        {data.countries.map(country => (\n          <option key={country.code} value={country.code}>\n            {country.name}\n          </option>\n        ))}\n      </select>\n    );\n  }\n  \n  {CountrySelect()}\n        \n    // const CHARACTER_QUERY = gql`\n    //     query CHARACTER_QUERY {\n    //         character(id: 1) {\n    //         name\n    //         id\n    //         }\n    //     }`   \n\n}\nexport default index;\n"]},"metadata":{},"sourceType":"module"}
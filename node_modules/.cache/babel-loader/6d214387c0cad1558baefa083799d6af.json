{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Head\\\\Desktop\\\\React JS\\\\dev-challenge-template-master\\\\kimchechallenge\\\\src\\\\index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloClient, InMemoryCache, gql, useQuery } from \"@apollo/client\";\nimport Flags from \"country-flag-icons/react/3x2\";\nimport Header from \"./components/header\";\nimport Footer from \"./components/footer\";\nimport { Label, Row, Col, Input, Button, Card, CardBody } from \"reactstrap\";\nimport SearchIcon from \"@material-ui/icons/Search\"; // initialize a GraphQL client\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: \"https://countries.trevorblades.com\"\n}); // write a GraphQL query that asks for names and codes for all countries\n// const LIST_COUNTRIES = gql`\n//   {\n//     countries {\n//       name\n//       code\n//       native\n//       capital\n//       emoji\n//       currency\n//       languages {\n//         code\n//         name\n//       }\n//     }\n//   }\n// `;\n// interface Country {\n//   name: string;\n//   code: string;\n//   capital: string;\n//   continent: {\n//     name: string;\n//   };\n// }\n// interface CountryData {\n//   countries: Country[];\n// }\n// const [CountryVariable] = useState({\n//   code: \"\"\n// })\n// const COUNTRIES_QUERY = gql`\n//   query Counties($code: String) {\n//     countries(filter: { continent: { eq: $code } }) {\n//       name\n//       code\n//       capital\n//       continent {\n//         name\n//       }\n//     }\n//   }\n// `;\n// const COUNTRIES_QUERY = gql`\n//   query Countries {\n//     countries {\n//       name\n//       code\n//       capital\n//       continent {\n//         name\n//         code\n//       }\n//     }\n//   }\n// `;\n\nconst CountryList = () => {\n  // const [conti, setConti] = useState(\"EU\");\n  const [continentCode, setContinentCode] = useState('');\n  const [cont, setCont] = useState(\"\");\n  const COUNTRIES_QUERY = gql`\n  query Counties($code: String) {\n    countries(filter: { continent: { eq: $code } }) {\n      name\n      code\n      capital\n      continent {\n        name\n        code\n      }\n    }\n  }\n`;\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(COUNTRIES_QUERY, {\n    client,\n    variables: {\n      code: continentCode\n    }\n  });\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n\n  const {\n    countries\n  } = data;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(Row, {\n    style: {\n      marginTop: 20,\n      marginBottom: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, \"Some random text \", \"\\n\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"input-group input-group-lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(SearchIcon, {\n    style: {\n      fontSize: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    class: \"form-control\",\n    placeholder: \"Recipient's username\",\n    \"aria-describedby\": \"button-addon2\",\n    style: {\n      borderRadius: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }), \"  \", /*#__PURE__*/React.createElement(\"button\", {\n    class: \"btn btn-outline-secondary\",\n    type: \"button\",\n    id: \"button-addon2\",\n    style: {\n      borderRadius: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  }, \"Button\")))), /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    style: {\n      flexDirection: 'row',\n      alignSelf: 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"col\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 8\n    }\n  }, \"Group by\")), /*#__PURE__*/React.createElement(\"col\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 8\n    }\n  }, \"Continent\")), /*#__PURE__*/React.createElement(\"col\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 8\n    }\n  }, \"Language\")))), /*#__PURE__*/React.createElement(\"select\", {\n    style: {\n      margin: 40\n    },\n    value: cont,\n    onChange: event => {\n      setCont(event.target.value);\n      console.log(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"AS\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }, \"Asia\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"EU\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  }, \"EUROPA\")), countries.length === 0 ? /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 32\n    }\n  }, \"GG\") : countries.map((c, i) => /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }, c.name, \" - \", c.capital, \" - \", c.continent.name)), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }\n  }));\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(CountryList, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 17\n  }\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["C:/Users/Head/Desktop/React JS/dev-challenge-template-master/kimchechallenge/src/index.js"],"names":["React","useEffect","useState","ReactDOM","ApolloClient","InMemoryCache","gql","useQuery","Flags","Header","Footer","Label","Row","Col","Input","Button","Card","CardBody","SearchIcon","client","cache","uri","CountryList","continentCode","setContinentCode","cont","setCont","COUNTRIES_QUERY","data","loading","error","variables","code","countries","marginTop","marginBottom","fontSize","borderRadius","flexDirection","alignSelf","margin","event","target","value","console","log","length","map","c","i","name","capital","continent","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloClient, InMemoryCache, gql, useQuery } from \"@apollo/client\";\nimport Flags from \"country-flag-icons/react/3x2\";\nimport Header from \"./components/header\";\nimport Footer from \"./components/footer\";\nimport { Label, Row, Col, Input, Button, Card, CardBody } from \"reactstrap\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n// initialize a GraphQL client\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: \"https://countries.trevorblades.com\",\n});\n\n// write a GraphQL query that asks for names and codes for all countries\n// const LIST_COUNTRIES = gql`\n//   {\n//     countries {\n//       name\n//       code\n//       native\n//       capital\n//       emoji\n//       currency\n//       languages {\n//         code\n//         name\n//       }\n//     }\n//   }\n// `;\n\n// interface Country {\n//   name: string;\n//   code: string;\n//   capital: string;\n//   continent: {\n//     name: string;\n//   };\n// }\n\n// interface CountryData {\n//   countries: Country[];\n// }\n\n// const [CountryVariable] = useState({\n//   code: \"\"\n// })\n\n// const COUNTRIES_QUERY = gql`\n//   query Counties($code: String) {\n//     countries(filter: { continent: { eq: $code } }) {\n//       name\n//       code\n//       capital\n//       continent {\n//         name\n//       }\n//     }\n//   }\n// `;\n\n// const COUNTRIES_QUERY = gql`\n//   query Countries {\n//     countries {\n//       name\n//       code\n//       capital\n//       continent {\n//         name\n//         code\n//       }\n//     }\n//   }\n// `;\n\n\nconst CountryList = () => {\n  \n  // const [conti, setConti] = useState(\"EU\");\n  const [continentCode, setContinentCode] = useState('');\n  const [cont, setCont] = useState(\"\");\n\n  const COUNTRIES_QUERY = gql`\n  query Counties($code: String) {\n    countries(filter: { continent: { eq: $code } }) {\n      name\n      code\n      capital\n      continent {\n        name\n        code\n      }\n    }\n  }\n`;\n\n  const { data, loading, error } = useQuery(COUNTRIES_QUERY, { client,\n    variables: {\n      code: continentCode,\n    }, });\n\n \n  \n  if (loading) {\n    return <p>Loading...</p>;\n  }  \n  const { countries } = data;\n  return (\n    <>\n<Header></Header>\n\n<Row style={{ marginTop: 20, marginBottom: 20 }}>\n        <Col>\n          <h3>Some random text {\"\\n\"}</h3>\n          {/* <div class=\"input-group input-group-sm mb-3\">\n  <span class=\"input-group-text\" id=\"inputGroup-sizing-sm\"></span><SearchIcon style={{fontSize: 30}} />\n  <Input type=\"text\" class=\"form-control\" aria-label=\"Sizing example input\" aria-describedby=\"inputGroup-sizing-\"/>\n</div> */}\n          <div class=\"input-group input-group-lg\">\n          <SearchIcon style={{fontSize: 20}} />\n          <input type=\"text\" class=\"form-control\" \n          placeholder=\"Recipient's username\" \n          aria-describedby=\"button-addon2\"\n          style={{borderRadius: 5}}/>\n          {\"  \"}\n          <button class=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\" style={{borderRadius: 5}}>Button</button>\n        </div>\n        </Col>\n      </Row>\n      \n      <Card>\n        <Row style={{flexDirection: 'row', alignSelf: 'auto'}}>\n       <col>\n       <h2>Group by</h2>\n       </col>\n       <col>\n       <Button>Continent</Button>\n       </col>\n       <col>\n       <Button>Language</Button>\n       </col>\n       </Row> \n       {/* </CardBody> */}\n      </Card>\n    \n{/* <span style={{margin: 20, marginTop: 100}}>{\" \"}</span> */}\n<select\nstyle={{margin: 40}}\n        value={cont}\n        onChange={(event) => {\n          setCont(event.target.value)\n          console.log(event.target.value);\n        }}\n      >\n      \n            <option value='AS'>\nAsia\n            </option>\n            <option value='EU'>\nEUROPA\n            </option>\n    \n      </select>\n\n      {countries.length=== 0 ? <h1>GG</h1> :\n      countries.map((c, i) => (\n        <div key={i}>\n          {c.name} - {c.capital} - {c.continent.name}\n        </div>\n      ))}\n\n      <Footer></Footer>\n    </>\n  );\n};\n\n\nReactDOM.render(<CountryList />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}
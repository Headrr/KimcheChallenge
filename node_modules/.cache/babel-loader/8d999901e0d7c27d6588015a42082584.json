{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Head\\\\Desktop\\\\React JS\\\\dev-challenge-template-master\\\\kimchechallenge\\\\src\\\\index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloClient, InMemoryCache, gql, useQuery } from \"@apollo/client\";\nimport Flags from \"country-flag-icons/react/3x2\";\nimport Header from \"./components/header\";\nimport Footer from \"./components/footer\";\nimport { Label, Row, Col, Input } from \"reactstrap\";\nimport SearchIcon from \"@material-ui/icons/Search\"; // initialize a GraphQL client\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: \"https://countries.trevorblades.com\"\n}); // write a GraphQL query that asks for names and codes for all countries\n// const LIST_COUNTRIES = gql`\n//   {\n//     countries {\n//       name\n//       code\n//       native\n//       capital\n//       emoji\n//       currency\n//       languages {\n//         code\n//         name\n//       }\n//     }\n//   }\n// `;\n// interface Country {\n//   name: string;\n//   code: string;\n//   capital: string;\n//   continent: {\n//     name: string;\n//   };\n// }\n// interface CountryData {\n//   countries: Country[];\n// }\n// const [CountryVariable] = useState({\n//   code: \"\"\n// })\n// const COUNTRIES_QUERY = gql`\n//   query Counties($code: String) {\n//     countries(filter: { continent: { eq: $code } }) {\n//       name\n//       code\n//       capital\n//       continent {\n//         name\n//       }\n//     }\n//   }\n// `;\n// const COUNTRIES_QUERY = gql`\n//   query Countries {\n//     countries {\n//       name\n//       code\n//       capital\n//       continent {\n//         name\n//         code\n//       }\n//     }\n//   }\n// `;\n\nconst CountryList = () => {\n  const [conti, setConti] = useState(\"EU\");\n  const COUNTRIES_QUERY = gql`\n  query Counties($code: String) {\n    countries(filter: { continent: { eq: $code } }) {\n      name\n      code\n      capital\n      continent {\n        name\n        code\n      }\n    }\n  }\n`;\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(COUNTRIES_QUERY, {\n    client\n  });\n  const {\n    countries\n  } = data;\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, countries.map((c, i) => /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, c.name, \" - \", c.capital, \" - \", c.continent.name)));\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(CountryList, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 17\n  }\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["C:/Users/Head/Desktop/React JS/dev-challenge-template-master/kimchechallenge/src/index.js"],"names":["React","useEffect","useState","ReactDOM","ApolloClient","InMemoryCache","gql","useQuery","Flags","Header","Footer","Label","Row","Col","Input","SearchIcon","client","cache","uri","CountryList","conti","setConti","COUNTRIES_QUERY","data","loading","error","countries","map","c","i","name","capital","continent","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,GAAtC,EAA2CC,QAA3C,QAA2D,gBAA3D;AACA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,GAArB,EAA0BC,KAA1B,QAAuC,YAAvC;AACA,OAAOC,UAAP,MAAuB,2BAAvB,C,CACA;;AAEA,MAAMC,MAAM,GAAG,IAAIZ,YAAJ,CAAiB;AAC9Ba,EAAAA,KAAK,EAAE,IAAIZ,aAAJ,EADuB;AAE9Ba,EAAAA,GAAG,EAAE;AAFyB,CAAjB,CAAf,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMC,WAAW,GAAG,MAAM;AAExB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMoB,eAAe,GAAGhB,GAAI;;;;;;;;;;;;CAA5B;AAaA,QAAM;AAAEiB,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BlB,QAAQ,CAACe,eAAD,EAAkB;AAAEN,IAAAA;AAAF,GAAlB,CAAzC;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAgBH,IAAtB;;AAEA,MAAIC,OAAJ,EAAa;AACX,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD;;AAED,sBACE,0CACGE,SAAS,CAACC,GAAV,CAAc,CAACC,CAAD,EAAIC,CAAJ,kBACb;AAAK,IAAA,GAAG,EAAEA,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,CAAC,CAACE,IADL,SACcF,CAAC,CAACG,OADhB,SAC4BH,CAAC,CAACI,SAAF,CAAYF,IADxC,CADD,CADH,CADF;AASD,CAjCD;;AAoCA3B,QAAQ,CAAC8B,MAAT,eAAgB,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAiCC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAjC","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloClient, InMemoryCache, gql, useQuery } from \"@apollo/client\";\nimport Flags from \"country-flag-icons/react/3x2\";\nimport Header from \"./components/header\";\nimport Footer from \"./components/footer\";\nimport { Label, Row, Col, Input } from \"reactstrap\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n// initialize a GraphQL client\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: \"https://countries.trevorblades.com\",\n});\n\n// write a GraphQL query that asks for names and codes for all countries\n// const LIST_COUNTRIES = gql`\n//   {\n//     countries {\n//       name\n//       code\n//       native\n//       capital\n//       emoji\n//       currency\n//       languages {\n//         code\n//         name\n//       }\n//     }\n//   }\n// `;\n\n// interface Country {\n//   name: string;\n//   code: string;\n//   capital: string;\n//   continent: {\n//     name: string;\n//   };\n// }\n\n// interface CountryData {\n//   countries: Country[];\n// }\n\n// const [CountryVariable] = useState({\n//   code: \"\"\n// })\n\n// const COUNTRIES_QUERY = gql`\n//   query Counties($code: String) {\n//     countries(filter: { continent: { eq: $code } }) {\n//       name\n//       code\n//       capital\n//       continent {\n//         name\n//       }\n//     }\n//   }\n// `;\n\n// const COUNTRIES_QUERY = gql`\n//   query Countries {\n//     countries {\n//       name\n//       code\n//       capital\n//       continent {\n//         name\n//         code\n//       }\n//     }\n//   }\n// `;\n\n\nconst CountryList = () => {\n  \n  const [conti, setConti] = useState(\"EU\");\n\n  const COUNTRIES_QUERY = gql`\n  query Counties($code: String) {\n    countries(filter: { continent: { eq: $code } }) {\n      name\n      code\n      capital\n      continent {\n        name\n        code\n      }\n    }\n  }\n`;\n  const { data, loading, error } = useQuery(COUNTRIES_QUERY, { client });\n  const { countries } = data;\n  \n  if (loading) {\n    return <p>Loading...</p>;\n  }  \n  \n  return (\n    <>\n      {countries.map((c, i) => (\n        <div key={i}>\n          {c.name} - {c.capital} - {c.continent.name}\n        </div>\n      ))}\n    </>\n  );\n};\n\n\nReactDOM.render(<CountryList />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}